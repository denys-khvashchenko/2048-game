{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        _class_call_check(this, Game);\n        this.rows = 4;\n        this.columns = 4;\n        this.score = 0;\n        this.status = \"playing\";\n        this.field = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.initializeGame();\n    }\n    _create_class(Game, [\n        {\n            key: \"initializeGame\",\n            value: function initializeGame() {\n                if (!this.findZero()) {\n                    this.setRandomNum();\n                    this.setRandomNum();\n                }\n                this.updateView();\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.field;\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                this.slide(\"left\");\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                this.slide(\"right\");\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.slide(\"up\");\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.slide(\"down\");\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.restart();\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.score = 0;\n                this.status = \"playing\";\n                this.field = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.setRandomNum();\n                this.setRandomNum();\n                this.updateView();\n            }\n        },\n        {\n            key: \"updateView\",\n            value: function updateView() {\n                gameScore.textContent = this.score;\n                for(var x = 0; x < this.rows; x++)for(var y = 0; y < this.columns; y++){\n                    var value = this.field[x][y];\n                    var cell = document.getElementById(\"\".concat(x, \"_\").concat(y));\n                    cell.textContent = \"\";\n                    cell.classList.value = \"field-cell\";\n                    if (value !== 0) {\n                        cell.textContent = \"\".concat(value);\n                        cell.classList.add(\"field-cell--\".concat(value));\n                    }\n                }\n                if (this.status === \"won\") winMessage.classList.remove(\"hidden\");\n                else if (this.status === \"lost\") loseMessage.classList.remove(\"hidden\");\n                else {\n                    winMessage.classList.add(\"hidden\");\n                    loseMessage.classList.add(\"hidden\");\n                }\n            }\n        },\n        {\n            key: \"findZero\",\n            value: function findZero() {\n                for(var x = 0; x < this.rows; x++){\n                    if (this.field[x].includes(0)) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"setRandomNum\",\n            value: function setRandomNum() {\n                if (this.findZero()) while(true){\n                    var x = Math.floor(Math.random() * this.rows);\n                    var y = Math.floor(Math.random() * this.columns);\n                    if (this.field[x][y] === 0) {\n                        var randomNum = Math.random() < 0.9 ? 2 : 4;\n                        this.field[x][y] = randomNum;\n                        break;\n                    }\n                }\n            }\n        },\n        {\n            key: \"slide\",\n            value: function slide(direction) {\n                var startField = this.field.map(function(row) {\n                    return _to_consumable_array(row);\n                });\n                switch(direction){\n                    case \"left\":\n                        for(var x = 0; x < this.rows; x++){\n                            var row = this.field[x];\n                            this.field[x] = this.slideRow(row);\n                        }\n                        break;\n                    case \"right\":\n                        for(var x1 = 0; x1 < this.rows; x1++){\n                            var row1 = this.field[x1].slice().reverse();\n                            row1 = this.slideRow(row1).reverse();\n                            this.field[x1] = row1;\n                        }\n                        break;\n                    case \"up\":\n                        for(var y = 0; y < this.columns; y++){\n                            var column = [\n                                this.field[0][y],\n                                this.field[1][y],\n                                this.field[2][y],\n                                this.field[3][y]\n                            ];\n                            column = this.slideRow(column);\n                            for(var x2 = 0; x2 < this.rows; x2++)this.field[x2][y] = column[x2];\n                        }\n                        break;\n                    case \"down\":\n                        for(var y1 = 0; y1 < this.columns; y1++){\n                            var column1 = [\n                                this.field[0][y1],\n                                this.field[1][y1],\n                                this.field[2][y1],\n                                this.field[3][y1]\n                            ].reverse();\n                            column1 = this.slideRow(column1).reverse();\n                            for(var x3 = 0; x3 < this.rows; x3++)this.field[x3][y1] = column1[x3];\n                        }\n                        break;\n                }\n                if (!this.identicalFields(startField, this.field)) {\n                    this.setRandomNum();\n                    this.updateView();\n                }\n                if (!this.canMove()) {\n                    this.status = \"lost\";\n                    this.updateView();\n                }\n            }\n        },\n        {\n            key: \"slideRow\",\n            value: function slideRow(row) {\n                var filteredRow = row.filter(function(num) {\n                    return num !== 0;\n                });\n                for(var x = 0; x < filteredRow.length - 1; x++)if (filteredRow[x] === filteredRow[x + 1]) {\n                    filteredRow[x] *= 2;\n                    filteredRow[x + 1] = 0;\n                    this.score += filteredRow[x];\n                }\n                filteredRow = filteredRow.filter(function(num) {\n                    return num !== 0;\n                });\n                while(filteredRow.length < this.columns)filteredRow.push(0);\n                return filteredRow;\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove() {\n                if (this.findZero()) return true;\n                for(var x = 0; x < this.rows; x++)for(var y = 0; y < this.columns; y++){\n                    var _this_field_;\n                    if (this.field[x][y] === this.field[x][y + 1] || this.field[x][y] === ((_this_field_ = this.field[x + 1]) === null || _this_field_ === void 0 ? void 0 : _this_field_[y])) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"identicalFields\",\n            value: function identicalFields(startField, finishField) {\n                for(var x = 0; x < this.rows; x++)for(var y = 0; y < this.columns; y++){\n                    if (startField[x][y] !== finishField[x][y]) return false;\n                }\n                return true;\n            }\n        }\n    ]);\n    return Game;\n}();\nvar button = document.querySelector(\".button\");\nvar gameScore = document.querySelector(\".game-score\");\nvar startMessage = document.querySelector(\".message-start\");\nvar loseMessage = document.querySelector(\".message-lose\");\nvar winMessage = document.querySelector(\".message-win\");\nvar game = new Game();\nbutton.addEventListener(\"click\", function() {\n    game.start();\n    button.blur();\n    button.classList.add(\"restart\");\n    button.classList.remove(\"start\");\n    button.textContent = \"Restart\";\n    startMessage.classList.add(\"hidden\");\n    winMessage.classList.add(\"hidden\");\n    loseMessage.classList.add(\"hidden\");\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if (game.status !== \"playing\") return;\n    if (e.code === \"ArrowLeft\") game.moveLeft();\n    if (e.code === \"ArrowRight\") game.moveRight();\n    if (e.code === \"ArrowUp\") game.moveUp();\n    if (e.code === \"ArrowDown\") game.moveDown();\n    gameScore.textContent = \"\".concat(game.getScore());\n});\n\n//# sourceMappingURL=index.511e8c1b.js.map\n","'use strict';\n\nclass Game {\n  constructor(initialState = null) {\n    this.rows = 4;\n    this.columns = 4;\n    this.score = 0;\n    this.status = 'playing';\n\n    this.field = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.initializeGame();\n  }\n\n  initializeGame() {\n    if (!this.findZero()) {\n      this.setRandomNum();\n      this.setRandomNum();\n    }\n    this.updateView();\n  }\n\n  getState() {\n    return this.field;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  moveLeft() {\n    this.slide('left');\n  }\n\n  moveRight() {\n    this.slide('right');\n  }\n\n  moveUp() {\n    this.slide('up');\n  }\n\n  moveDown() {\n    this.slide('down');\n  }\n\n  start() {\n    this.status = 'playing';\n    this.restart();\n  }\n\n  restart() {\n    this.score = 0;\n    this.status = 'playing';\n\n    this.field = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.setRandomNum();\n    this.setRandomNum();\n    this.updateView();\n  }\n\n  updateView() {\n    gameScore.textContent = this.score;\n\n    for (let x = 0; x < this.rows; x++) {\n      for (let y = 0; y < this.columns; y++) {\n        const value = this.field[x][y];\n        const cell = document.getElementById(`${x}_${y}`);\n\n        cell.textContent = '';\n        cell.classList.value = 'field-cell';\n\n        if (value !== 0) {\n          cell.textContent = `${value}`;\n          cell.classList.add(`field-cell--${value}`);\n        }\n      }\n    }\n\n    if (this.status === 'won') {\n      winMessage.classList.remove('hidden');\n    } else if (this.status === 'lost') {\n      loseMessage.classList.remove('hidden');\n    } else {\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n    }\n  }\n\n  findZero() {\n    for (let x = 0; x < this.rows; x++) {\n      if (this.field[x].includes(0)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  setRandomNum() {\n    if (this.findZero()) {\n      while (true) {\n        const x = Math.floor(Math.random() * this.rows);\n        const y = Math.floor(Math.random() * this.columns);\n\n        if (this.field[x][y] === 0) {\n          const randomNum = Math.random() < 0.9 ? 2 : 4;\n\n          this.field[x][y] = randomNum;\n          break;\n        }\n      }\n    }\n  }\n\n  slide(direction) {\n    const startField = this.field.map((row) => [...row]);\n\n    switch (direction) {\n      case 'left':\n        for (let x = 0; x < this.rows; x++) {\n          const row = this.field[x];\n\n          this.field[x] = this.slideRow(row);\n        }\n        break;\n      case 'right':\n        for (let x = 0; x < this.rows; x++) {\n          let row = this.field[x].slice().reverse();\n\n          row = this.slideRow(row).reverse();\n          this.field[x] = row;\n        }\n        break;\n      case 'up':\n        for (let y = 0; y < this.columns; y++) {\n          let column = [\n            this.field[0][y],\n            this.field[1][y],\n            this.field[2][y],\n            this.field[3][y],\n          ];\n\n          column = this.slideRow(column);\n\n          for (let x = 0; x < this.rows; x++) {\n            this.field[x][y] = column[x];\n          }\n        }\n        break;\n      case 'down':\n        for (let y = 0; y < this.columns; y++) {\n          let column = [\n            this.field[0][y],\n            this.field[1][y],\n            this.field[2][y],\n            this.field[3][y],\n          ].reverse();\n\n          column = this.slideRow(column).reverse();\n\n          for (let x = 0; x < this.rows; x++) {\n            this.field[x][y] = column[x];\n          }\n        }\n        break;\n    }\n\n    if (!this.identicalFields(startField, this.field)) {\n      this.setRandomNum();\n      this.updateView();\n    }\n\n    if (!this.canMove()) {\n      this.status = 'lost';\n      this.updateView();\n    }\n  }\n\n  slideRow(row) {\n    let filteredRow = row.filter((num) => num !== 0);\n\n    for (let x = 0; x < filteredRow.length - 1; x++) {\n      if (filteredRow[x] === filteredRow[x + 1]) {\n        filteredRow[x] *= 2;\n        filteredRow[x + 1] = 0;\n        this.score += filteredRow[x];\n      }\n    }\n\n    filteredRow = filteredRow.filter((num) => num !== 0);\n\n    while (filteredRow.length < this.columns) {\n      filteredRow.push(0);\n    }\n\n    return filteredRow;\n  }\n\n  canMove() {\n    if (this.findZero()) {\n      return true;\n    }\n\n    for (let x = 0; x < this.rows; x++) {\n      for (let y = 0; y < this.columns; y++) {\n        if (\n          this.field[x][y] === this.field[x][y + 1] ||\n          this.field[x][y] === this.field[x + 1]?.[y]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  identicalFields(startField, finishField) {\n    for (let x = 0; x < this.rows; x++) {\n      for (let y = 0; y < this.columns; y++) {\n        if (startField[x][y] !== finishField[x][y]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nconst button = document.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\n\nconst game = new Game();\n\nbutton.addEventListener('click', () => {\n  game.start();\n  button.blur();\n  button.classList.add('restart');\n  button.classList.remove('start');\n  button.textContent = 'Restart';\n  startMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.status !== 'playing') {\n    return;\n  }\n\n  if (e.code === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (e.code === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (e.code === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (e.code === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  gameScore.textContent = `${game.getScore()}`;\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","Game","protoProps","initialState","arguments","_class_call_check","instance","Constructor","TypeError","rows","columns","score","status","field","initializeGame","key","value","findZero","setRandomNum","updateView","slide","restart","gameScore","textContent","x","y","cell","document","getElementById","concat","classList","add","winMessage","remove","loseMessage","includes","Math","floor","random","randomNum","direction","startField","map","row","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","slideRow","x1","row1","reverse","column","x2","y1","column1","x3","identicalFields","canMove","filteredRow","filter","num","push","_this_field_","finishField","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","button","querySelector","startMessage","game","addEventListener","start","blur","e","code","moveLeft","moveRight","moveUp","moveDown","getScore"],"version":3,"file":"index.511e8c1b.js.map"}